name: Publish And Deploy Demo # 自动化部署的名称
on:
  push:
    tags:
      - 'v*' # 当我们提交标签的时候，相当于版本（v开头触发）

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 运行环境
    steps:

    # 下载源码 （将远程仓库的代码拉取到本地）
    - name: Checkout
      uses: actions/checkout@master

    # 打包构建
    - name: Build
      uses: actions/setup-node@master
    - run: npm install
    - run: npm run build
    - run: tar -zcvf release.tgz .nuxt static nuxt.config.js package.json package-lock.json pm2.config.json

    # 发布 Release （创建Release）
    - name: Create Release
      id: create_release
      uses: actions/create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }} # 仓库下的token
      with:
        tag_name: ${{ github.ref }} # 标签名称
        release_name: Release ${{ github.ref }} # Release名称
        draft: false # 是否是草稿
        prerelease: false # 是否是预发布

    # 上传构建结果到 Release
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release.tgz # 上传的文件
        asset_name: release.tgz # 上传的文件名
        asset_content_type: application/x-tgz

    # 部署到服务器
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }} # 机器的host
        username: ${{ secrets.USERNAME }} # 远程仓库的用户名
        password: ${{ secrets.PASSWORD }} # 远程仓库的密码
        port: ${{ secrets.PORT }}  # 远程仓库的端口号
        script: | # 执行命令构建 （在远程服务器中）1.进入到该目录（前提创建好）2.下载Release发布包 3.解压 4.安装生产 5.重启服务
          cd /root/realworld-nuxtjs
          wget https://github.com/lipengzhou/realworld-nuxtjs/releases/latest/download/release.tgz -O release.tgz
          tar zxvf release.tgz
          npm install --production
          pm2 reload pm2.config.json
